from datetime import datetime
from typing import Optional, List

from sqlalchemy import UniqueConstraint
from sqlmodel import SQLModel, Field, Relationship


class AuthToken(SQLModel, table=True):
    __tablename__ = "auth_token"
    id: Optional[int] = Field(default=None, primary_key=True, index=True)
    name: str = Field(max_length=255, unique=True)
    token: str = Field(max_length=1024)  # jwt token generated by backend
    aad_user_id: str = Field(max_length=36)  # store aad auth user_id
    create_time: datetime = Field(default_factory=datetime.utcnow)
    update_time: datetime = Field(default_factory=datetime.utcnow)


# - RBAC TABLES
class UserRoleLink(SQLModel, table=True):
    __tablename__ = 'rbac_user_role_link'
    user_id: int | None = Field(default=None, foreign_key="rbac_users.id", primary_key=True)
    role_id: int | None = Field(default=None, foreign_key="rbac_roles.id", primary_key=True)


class RoleMenuActionLink(SQLModel, table=True):
    __tablename__ = 'rbac_role_menu_action_link'
    role_id: int | None = Field(default=None, foreign_key="rbac_roles.id", primary_key=True)
    action_id: int | None = Field(default=None, foreign_key="rbac_menu_actions.id", primary_key=True)


class RUser(SQLModel, table=True):
    __tablename__ = 'rbac_users'
    id: Optional[int] = Field(default=None, primary_key=True)
    name: str = Field(max_length=50, nullable=False)
    email: str = Field(max_length=100, nullable=False, unique=True)
    is_active: bool = Field(default=True)
    roles: List["Role"] = Relationship(back_populates="users", link_model=UserRoleLink,
                                       sa_relationship_kwargs={'lazy': 'selectin'})


# https://github.com/tiangolo/sqlmodel/issues/127#issuecomment-1224135123
class Menu(SQLModel, table=True):
    __tablename__ = 'rbac_menus'
    id: Optional[int] = Field(default=None, primary_key=True)
    name: str = Field(max_length=50, nullable=False)
    path: str = Field(max_length=100, nullable=False)
    parent_id: Optional[int] = Field(default=None, foreign_key='rbac_menus.id')
    super_only: bool = Field(default=False)  # only superAdmin can access
    children: List["Menu"] = Relationship(back_populates="parent",
                                          sa_relationship_kwargs={"remote_side": "Menu.id",
                                                                  'lazy': 'selectin'})
    parent: Optional["Menu"] = Relationship(back_populates="children")
    actions: List["MenuAction"] = Relationship(back_populates="menu", cascade_delete=True,
                                               sa_relationship_kwargs={'lazy': 'selectin'})


class MenuAction(SQLModel, table=True):
    __tablename__ = 'rbac_menu_actions'
    __table_args__ = (UniqueConstraint('menu_id', 'action', name='_menu_action_uc'),)
    id: Optional[int] = Field(default=None, primary_key=True)
    menu_id: int = Field(foreign_key='rbac_menus.id')
    action: str = Field(max_length=50, nullable=False)  # "view" or "edit" or "hide"
    menu: "Menu" = Relationship(back_populates="actions",
                                sa_relationship_kwargs={'lazy': 'selectin'})
    roles: List["Role"] = Relationship(back_populates="actions", link_model=RoleMenuActionLink,
                                       sa_relationship_kwargs={'lazy': 'selectin'})


class Role(SQLModel, table=True):
    __tablename__ = 'rbac_roles'
    id: Optional[int] = Field(default=None, primary_key=True)
    name: str = Field(max_length=50, nullable=False)
    description: Optional[str] = Field(default=None, max_length=100)
    is_preset: bool = Field(default=False)
    users: List["RUser"] = Relationship(back_populates='roles', link_model=UserRoleLink,
                                        sa_relationship_kwargs={'lazy': 'selectin'})
    actions: List["MenuAction"] = Relationship(back_populates="roles", link_model=RoleMenuActionLink,
                                               sa_relationship_kwargs={'lazy': 'selectin'})


# - RBAC TABLES END


class HashValidation(SQLModel, table=True):
    __tablename__ = "hash_validation"
    id: Optional[int] = Field(default=None, primary_key=True, index=True)
    name: str = Field(max_length=255, unique=True)  # rbac_init
    type: str = Field(max_length=32)  # initial | xxx
    hash: str = Field(max_length=64)  # hash_value_xx
